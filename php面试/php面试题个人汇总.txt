1，<?php echo count(strlen('http://php.net')); ?> 执行结果 
答案 1
分析： count函数用来统计数组或者是对象的元素的个数，如果是null或者是空数组是的时候返回0，如果是一个普通的变量就返回1

2，使用list函数需要注意的内容
答案：list的作用是将一个数组的元素赋值给一些变量，第一个参数必须是索引从0开始的数组。list($array,$a,$b,...)

3，php.ini中的safe_mode开启之后受影响的主要是那些函数
答案与分析： safe_mode是php的安全模式。开启安全模式之后，主要会对操作系统，文件，权限设置等方法产生影响。
主要的相关函数有： ckdir move_uploaded_file  chgrp  parse_ini_file  chown  rmdir copy rename fopen require highlight_file  show_source  include  symlink link  touch  mkdir  unlink  exec  shell_exec  pasathru  system popen
--note: php5.3以上，safe_mode被弃用，在php5.4以上，将此特性完全去除了。

4，对posix风格和兼容prel风格两种你正则表达式的主要函数进行说明
答案：posix风格：匹配正则 ereg  ereg_replace
	prel风格： preg_match  preg_replace
其中preg_match 比ereg的执行效率更快，preg_replace比ereg_replace 执行更快


5,如何在命令下运行php，如何向php脚本传递参数
答案：第一种：使用php -f "php文件路径"
	第二种：使用 php -r "要执行的php代码，其中不需要php脚本的开始符与结束符"
对于 php -r "要执行的代码"传递参数的形式是： 在命令后面空格 + args列表。 值得注意的是如果参数的第一个是以 “-” 开头的，那么使用的方法是 php -r "要执行的代码" -- args列表。也就是说如果第一个参数的开始字母是 - 那么用 -- 分割命令和参数列表。
对于 php -f ./xx.php args列表(如果第一个参数是以 - 开头 那么也是一样参数列表与命令之间用 -- 分割)。 相应的php文件中开头加入一行 #!/usr/bin//php可以直接接受用 - 开头的参数

6，php5中的魔术方法
答案：
__construct(): 实例化对象时调用
__destruct(): 销毁对象或者脚本执行结束的时候自动调用
__call(): 调用对象不存在方法的时候执行的函数
__get(): 获取对象不存在属性的时候调用
__set(): 设置对象不存在的属性的时候执行
__isset(): 检测对象的某个属性是否存在的时候执行
__unset(): 销毁对象的某个属性的时候执行
__tostring(): 将对象当做字符串输出的时候执行
__clone(): 克隆对象的时候执行
__autoload(): 实例化对象的时候，如果类没有加载，那么会执行这个函数自动加载类
__sleep(): serialize之前调用，可以指定要序列化的对象的属性。
__wakeup: unserialize之前调用，可以执行对象初始化的工作
__set_state(): 调用var_export时调用，用__set_state的返回值用作var_export的值
__invoke(): 将对象当做函数来使用的时候执行这个方法，但是一般不建议这么做。

7，说明php的垃圾回收机制
答案： php中的变量存在变量容器zval中，zval中除了存贮变量类型和值以外，还有is_ref和refcount字段。refcount表示指向变量个元素个数，is_ref表示变量是否有别名。如果refcount为0，就会回收这个变量容器。如果一个zval的refcount减一之后大于0，这个变量会进入垃圾缓冲区。当垃圾缓冲区达到了最大值后，回收算法会循环遍历zval，判断是否是垃圾。


8，php实现双向队列
分析：队列是线性表，先进先出
	单向队列：只能从头进，从尾部出
	双向队列：头尾都可以进出
实现： 
	class Deque{
		private $array = array();	
		public function setFirst($item){
			return array_unshift($this->array,$item);
		}
		public function delLast(){
			return array_pop($this->array); //删尾部
		}
		public function setLast($item){
			return array_push($this->array,$item);
		}
		public function delFirst(){
			return array_shift($this->array); //删除并返回第一个值
		}
		//清空队列
		public function erease(){
			unset($this->array);
		}
	}
---补充函数说明:
	array_shift($array): 删除第一个元素并返回
	array_unshift($array, $a, $b, ...): 将一个或者一组的元素加入到数组，新加入后的脚标是0 1 2 ...。 会影响到数组中原来是数字脚标的元素. 这个函数返回的是加入之后数组元素的个数。
	array_push($array,$a,$b,...)；类比array_unshift 只是操作发生在数组后面
	array_pop($array): 类比 array_shift，只是发生在数组后面部位

9，单引号与双引号的区别
答案：a）单引号中间不会解析变量，双引号会解析变量，所以单引号效率更好。双引号里面包住单引号，然后单引号里面放变量也会被解析。
	b）双引号里面的要解析的变量后面不能放 “数字 字母  下划线”，否则这一部分也会被解析到变量里面去，在可能引起歧义的地方，可以用{}将要解析的变量括起来，可以解决这个问题
	c）双引号解析转义字符，单引号不解析除了 \\ 和 \' 之外的其他转移字符

10，php中常用的超全局变量
答案： $_GET: get方式提交的数据
	$_POST：post方式提交的数据
	$_REQUEST：可以接受get和post方式的数据
	$GLOBALS：所有的全局变量
	$_FILES：上传文件变量
	$_SERVER：服务器环境变量
	$_SESSION：存储在服务器上的会话数据
	$_COOKIE：存储在浏览器上的会话数据

11，post get put delete请求方式
答案：get: 请求指定页面信息，并返回实体主体
	post：向指定资源提交数据并进行处理请求，post请求一般会导致新的资源建立或者已有资源的修改
	put：从客户端传送的数据请求取代服务器上特定资源
	delete：请求删除指定页面
---补充：get请求把参数数据队列放到url中，post通过http post机制，将表单中各个字段和内容放到html的head中一起传送到action指向的url地址。对于get请求数据在服务器端使用Request.QueryString获取 对于post请求是用Request.Form获取，get请可求数据量小而且不安全，post请求数据量大（几十k设置上M）并且安全性好。get向服务器请求数据但是不会进行服务器资源的修改，put请求向服务器发送数据，对服务器上的资源进行更新。put请求是用来更新数据，而post请求是用来创建新内容（但是目前主流使用post也用于修改）


12，php语言的简单介绍
答案：php是 Hypertext Preprocessor的缩写，是超文本预处理器的意思。一开始是Personal Home Page的缩写。
----目前php主要用于快速编写动态生成的web页面。php创始人勒哆夫最开始是为了维护个人的网页，用prel语言写维护程序，后来用c语言重写，最终衍生了php/fi
-----时间轴：1995 php/fi公开  1995 php2.0加入对mysql的支持  1997 php3.0  2000 php4.0  2008 php5.0  后续的php6.0由于没有解决Unicode编码，所以只是概念产品。
-----特性： 1）混合c java  prel 以及php语法
	    2）可以比cgi或者prel更快的执行动态网页。php是将程序嵌入到html内部执行，执行效率比完全生成html编辑的cgi要高。
	    3）支持几乎所有的流行数据库和操作系统
	    4）可以使用c c++进行程序的扩展
	    5) 开放源代码  免费  跨平台  效率高  图形处理  面向对象


13，echo print_r print var_dump
答案：echo print 是语句，var_dump print_r是函数。
	echo输出一个或者多个字符串，中间用逗号隔开，没有返回值，是语言结构不是真正的函数，因此不能用作表达式的一部分。
	print也是php的关键字，有返回值，只能打印简单类型的变量（int string等），如果字符串显示成功返回true，失败返回false。
	print_r可以打印出复杂的变量（数组，对象），并且以array、object开头。但是print_r输出false或者是null都是没有意义的，因为都是打印"\n"。
	var_dump输出一个变量的类型，长度和数值。

14，http状态码
答案：
200 请求成功
301 资源永久转义到另一个url
404  not found  不存在
505  内部服务器错误
1**  一般指的是服务器接收到请求，需要请求者继续执行操作
2**  成功，操作被成功处理
3**  重定向，需要进一步的操作完成请求
4**  客户端错误，包括语法错误或者无法完成请求
5**  服务器错误，服务器处理请求的过程中发生了错误


15，魔术引号
和addslashes()函数作用相同，会将所有的 ‘ “ \ 和 null 前面加上一个反斜杠。这个特性在php5.3.0开始废弃，在php5.4开始被移除。


16，如何获取客户端和某个服务器端的ip，并且转换为int
答案：
	客户端可以通过 $_SERVER['REMOTE_ADDR'] 或者是 getenv('REMOTE_ADDR')获取，服务器端可以通过 gethostbyname('www.baidu.com')获取。ip转换为int可以通过ip2long()函数实现。

17，版本控制工具
答案： git svn cvs vss


18，数据库优化方法
答案：
	a）选取适合的字段
	尽量减少字段的宽度，例如可以用mediumint的作为比较小的数据表的主键类型。有的字段，例如省份性别这样的，可以使用enum类型，因为数据库把enum类型当做数值型的数据处理，而数值型的数据处理要比文本型的要快得多。尽量把字段设置成not null（这样数据库不用去比较null）
	b）使用连接join代替子查询。
	jon比子查询的速度更快的原因是因为mysql不需要在内存中创建临时的表来完成逻辑上需要两个步骤的查询。
	c）使用union代替手动创建临时表。
	union可以把需要使用临时表的两条或者多条select查询合并到一个查询中。在客户端会话结束的时候，临时表会被自动删除，从而保证数据库整齐、高效。使用unio的时候不同的select的字段数目要相同,例如 select name,age from t1 union select name,age from t2
	d）使用事务
	在一项工作需要一系列的操作完成的时候，如果其中的某一条语句执行失败就进行数据库回滚的时候，就需要使用事务。使用事务也保证了不同用户之间的操作不会相互干扰。
	e）锁定表
	尽管事务是维护数据库的完整性的好方法，但是因为它的独占性，可能会影响到数据库性能，特别是在大型的系统中，由于在事务执行的过程中，数据库将被锁定，因此其他用户将被迫等待该事务的结束。对于有些情况通过锁定表可以获取到更好的性能。例如 lock table t1 write updata t1 set name='xx' where id=3;unlocktables;这个语句保证了在unlocktables之前其他的用户不会进行写（插入、更新、删除）操作.
	f）适当使用外键
	对于有关联关系的两个表，可以使用外键，不过同事务一样，需要使用innodb引擎。
	g）使用索引
	索引是提高数据库性能的最常用方法，尤其是在查询语句中包含了max min  orderby 这些命令的时候，性能提高会很明显。一般来说，索引建立在那些将用于join  where判断和orderby的字段上。尽量不要对含有大量重复的值的字段建立索引，例如enum，因为有大量的重复的值，建立索引不仅不能提升效率还会降低数据库的性能。mysql目前已经支持全文索引，不过只支持myisam类型的表。
	h）优化自己的查询语句
		---最好相同类型的字段进行比较，否则可能设计到类型的转换（转换过程可能使索引不起作用）。作为特殊情况，char和varchar的字段大小相同的时候可以进行比较。
		---在建立了索引的字段上尽量不要使用函数操作，否则可能索引不能发挥应有的作用。
		---优化like与通配符的模糊匹配
			select * from books where name >='mysql' and name < 'mysqm'
			语句可以用来代替下面的语句实现查找以mysql开头的name
			select * from books where name like 'mysql%'


19，使用过的模板引擎
答案：
smarty：一种很老的php模板引擎，缺少新一代模板引擎所具有的部分特性。
thinkphp：是thinkphp外部框架自己的模板引擎


20，对于大流量的网站，采用什么方式进行优化
答案：
确认服务器硬件能够支持当前访问流量
数据库读写分离，优化数据库表
禁止外部盗链
控制大文件的下载
使用不同的主机分流


21，include与require
答案：
require是无条件包括，当前包括的文件不存在或者无法打开的时候会提示一个错误，并且会终止程序的执行。require无返回值，执行效率比include要好。
include 有返回值，如果文件不存在或者打不开会提示一个错误，但是程序会接着执行。


22，对mvc的认识
答案：
mvc是模型model，视图view，控制器controller的缩写。是一种软件设计典范。用一种业务逻辑、界面显示分离的方法组织书写代码，将业务逻辑聚集到一个部件里面，在改进交互界面的时候不需要重新书写业务逻辑。使用mvc架构进行开发，不同开发人员可以只关注其中的一层，这样便于分工和维护，降低了层与层之间的依赖，有利于各层逻辑的复用。


23，php中什么时候是值传递，什么时候是引用传递
答案：
php中变量默认总是值传递的，也即是说当一个变量赋予给另一个变量时，对其中一个变量的修改不会改变另一个变量的内容。
php提供了另一种叫做引用传递的方式，这样不同的变量指向了同一个内存，对其中的一个变量的修改会导致另一个变量同样被修改。书写的形式是 $b = &$b;
普通变量如果没有指明，全部都是值传递。对象的传递默认是引用传递，对于较大的数据，使用引用传递可以节省空间。


24，isset empty is_null的区别
答案：
isset: 是判断一个变量是否存在，如果一个变量只是定义没有赋值或者是赋值为null会返回false。对于赋值为false的返回true。
empty: 判断变量是否为空，能够与false使用 == 的都是true，例如“”，0，’0‘，null,false，空数组（没有任何属性的对象有些地方说是空的，但是通过测试发现不是空的）。（由于所有的false以及可以转化为false的都是空，所以if(empty($var)) 和if(!$var)）是等价的。
is_null: 判断变量 或者表达式的值是否是null。存在三种情况被判断为null，定义了没有赋值或者赋值为null，或者是unset了。也就是说is_null和isset相反。


25，php中，索引，主键，唯一索引，联合索引。索引对性能的影响。
答案：
索引是一种特殊的文件（innodb中索引是数据库表的空间的一部分），它包含着对数据库表中所有记录的引用指针。
普通索引：由关键字key或者index定义，唯一任务是加快对数据的访问速度。普通索引的不同记录的值是可以重复的。
唯一索引：如果在创建索引的时候用unique关键字指定为唯一索引，那么任意两个记录在这一列值是不能重复的，也就是多了一个唯一性约束。
主键：是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键索引用于唯一的标识一条记录。使用primary key进行创建
联合索引：指的是可以对两个或者多个列放在一起建立一个索引。index(col1,col2)
索引的作用：可以提高数据查询的速度，但是由于在创建更新和删除记录的时候需要更新索引信息，所以会降低插入和删除更新记录操作的效率。


26，数据库中的事务
答案：
事务（transaction）是将一组有序的操作当做一个执行单元进行数据库操作。如果这一组操作中所有的操作都成功，则事务操作成功，如果有某个操作失败，那么会引起数据库回滚导致事务操作失败。只有当所有的操作都成功的时候，数据库才会将内存中的数据真正的更新到数据库文件中。事务的四个特性：原子性、隔离性、一致性、持久性


27，XSS攻击是什么，如果防止
答案：
XSS是跨站脚本攻击，是利用跨站脚本漏洞以一个特权模式执行攻击者构建的脚本，然后利用控件执行恶意的行为。
一般的XSS可以使用htmlspecialchars()函数对提交的表单内容进行过滤。


28，sql注入漏洞产生的原因，如何防止
答案：
sql注入原因：程序开发过程中不注意书写的规范和对特殊字符没有进行处理或者过滤，导致客户端可以提交一些sql语句并且执行。
防止sql注入的方式：
	a）开启配置文件中 magic_quotes_gpc 和 magic_quotes_runtime配置（注意，这种方式在php5.3被废弃在5.4以后被移除，程序员应该在需要的地方自己进行addslashes()函数处理）
	b）执行sql语句之前使用addslashes进行sql语句转换
	c）过滤掉sql语句中的一些关键词：update  select insert等
	d）提高数据库表和字段的命名技穷，取不容易被猜到的内容。
	e）控制错误信息，不要在浏览器上输出错误信息，而是要输出到日志文件。

29，php网站的主要攻击方式
答案：
命令注入（Command Injection）
eval注入 (Eval Injection)
客户端脚本攻击 (Script Insertion)
跨网站脚本攻击 (Cross-site Scripting, XSS)
sql注入(SQL Injection)
跨站请求伪造攻击（Cross-site Request Forgeris, CSRF）
Session会话劫持（Session Hijacking）
Session固定攻击 (Session Fixation)
HTTP响应拆分攻击（HTTP Response Splitting）
文件上传漏洞 (File Upload Attack)
目录穿越漏洞 (Directory Traversal)
远程文件包含攻击 (Remote Inclusion)
动态函数注入攻击 (Dynamic Variable Evaluation)
URL 攻击 (URL Attack)
表单提交欺骗攻击 (Spoofed Form Submissions) 
HTTP请求欺骗攻击 (Spoofed HTTP Requests)

30，什么是单一入口和多入口，单一入口点的优缺点
答案：
多入口指的是通过访问不同的文件来完成用户请求。单一入口指的是所有的web请求都执行同一个脚本文件。
单一入口的优缺点： 单一入口更容易控制权限，方便对http请求进行安全性检查。但是单一入口的URL不美观，特搜索引擎来说不友好。


31，索引的目的
答案：
a）快速访问数据表中的特定信息，提高检索的速度
b）创建唯一性索引，可以保证一行记录的唯一性
c）加快表与表之间的连接
d）使用分组和排序子句进行数据检索的时候，可显著减少分组和排序的时间。


32，索引的负面影响
答案：
创建索引和维护索引都需要耗费时间，这个时间随着数量的增加而增加。索引需要占用物理空间，对表进行增删改的时候索引也需要进行维护，这就降低了数据的处理速度。


33，创建索引的原则
答案：
对频繁使用在where条件中或是使用在分组和排序的字段上加索引。

34，不宜创建索引
答案：
对where条件中 group by 和 order by很少涉及的列或者是值重复的比较多的（例如enum），不适合建立索引。对大文本类型，一般不直接创建索引。


35，mysql数据库库中的myisam和innodb的区别
答案：
mysql区别与其他数据库的最重要的特点是插件式的表存储引擎。（存储引擎是基于表的而不是基于数据库的）
myisam引擎：
是mysql官方提供的存储引擎，主要面向OLAP(Online Analytical Processing 在线分析处理)。myisam不支持事务，支持表索引和全文索引，操作速度快。myisam存储表分为myi和myd组成。myd用来存放数据，myi用来存放索引文件。mysql数据只缓存其索引文件，数据文件的缓存交给操作系统完成。myisam不支持外键和事务。
innodb引擎：
主要面向OLTP(Online Transaction Processing 在线事务处理)，是第一个完整支持ACID（ACID指的是事务正确执行的四个基本要素的缩写：Atomicity原子性 Consistency一致性 Isolation隔离性 Durability持久性）事务的存储引擎。
innodb引擎特点：
行锁设计，支持外键
支持类似于oracle风格的一致性非锁定读（即默认情况读取操作不会产生锁）
innodb将数据放到一个逻辑的表空间中，右innodb自身进行管理。可以对每一个innodb存储引擎的表单独存放到一个独立的ibd文件中。
innodb通过使用mvcc(多版本并发控制：读不会阻塞写，写也不会阻塞读)来获取高并发性，并且实现了sql标准的四种隔离级别。
innodb提供了插入缓冲(Inset buffer)、二次写(double write)、自适应哈希索引(adaptive hash index)、预读(read ahead)等高性能和高可用的功能。
innodb采用了聚集(clustered)的方式来存储表中的数据，每张表的存储都是按主键的顺序存放（如果没有指定主键，innodb会自动为每一行生成一个6位的rowid，并以此为主键）
innodb表有三个隐藏字段，除了db_row_id还有6个字节的db_tx_id(事务id)和7个字节的db_roll_ptr(指向对应回滚段的地址)。隐藏字段可以通过innodb monitor看到。


36，mysql中的外连接 内连接 自连接
答案：
内连接： 
只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中。
外连接：
结果集不仅包含符合连接条件的行，还包括左表、右表或者两个表中所有数据行，这三种情况称之为左外连接 又外连接  全外连接。
左外连接也称为左连接，左表为主表，左表的所有数据都会出现，对于右表没有与之匹配的部分这一行的字段值用null填充。右外连接与左外连接向对，右表的数据都会出现，对于左表中没有与之匹配的记录，相应的字段用null填充。mysql目前不支持全外连接。
自连接：
就是把自身表当做一个镜像对待，进行连接。


37，三种以上mysql存储引擎
答案：
myisam innodb bdb merge  memory  example archive


38，什么是面向对象，其主要的特性
答案：
面向对象是一种设计模式，它利于提高程序的重用性，使程序结果更加清晰。主要特性是抽象封装继承多态
五大设计原则：
单一职责原则  开放封闭原则   替换原则   依赖原则   接口分离原则


39，什么是静态路由，什么是动态路由。他们的特点
答案：
静态路由是由系统管理员设计与构建的路由表规定的路由。适合网关数量有限的场合并且网络拓扑结构不经常变化的网络。其缺点是不能动态的适应网络的变化，网络变化时必须由网络管理员修改路由表。
动态路由是由路由选择协议而动态构建，路由协议之间通过交换各自拥有的路由信息实时更新路由表的内容。动态路由可以自动学习网路的拓扑结构，并且更新路由表。其缺点是路由广播更新信息占据大量的网络带宽。


40，memcache缓存的工作原理
答案：
memcache把数据保存在内存中，采用hash表的方式，每条记录由key和value组成，每个key是独一无二的，当要访问某个值的时候，先按照key找到记录，然后返回结果。memcache采用了LRU算法来逐渐的把过期的数据清除掉。


41，列举ajax框架，说明ajax原理和json在ajax中的作用。
答案：
流行的ajax框架有：  jquery  prototype  dojo  mootools
ajax工作的原理：
一个页面的指定位置可以加载另一个页面的所有输出内容，这样就实现了一个静态页面获取到数据库中的返回数据信息了。所以ajax技术实现了一个静态网页不刷新整个页面的情况下与服务器通信，减少用户等待时间，同时降低了网络流量，增强了客户体验的友好度。
json在ajax中的作用：
使用ajax的时候，涉及到数据的传输，服务器端和客户端分别使用不同的脚本语言处理数据，这就需要一种通用的数据格式，xml和json就是常用的两种，而json比xml要简单。


42，mysql中事务回滚机制
答案：
事务是用户定义的一个数据库操作序列，这个操作序列中的中的各个操作是不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作进行撤销。
要同时修改数据库中的两个不同的表时，如果他们不是一个事务，当第一个修改完了，另一个表的操作可能由于异常而没能完成修改，而此时第一个表已经完成了修改。这个时候，如果将这两个操作放到一个事务中，那么第二个的异常会导致第一个已经完成的操作回滚，最终两个表都回到未修改的状态。这就是事务的回滚。


43，php支持多继承吗
答案：
不支持，php只能继承一个父类，用extend关键字。不过可以通过实现多个接口满足更多的需求。


44，页面引入css的几种方式
答案：
三种方式：  内联  内部定义style样式   引用外部的css文件


45，php中获取图像尺寸的方法
答案：
getimagesize()获取图片尺寸
imagesx()获取宽度
imagesy()获取高度


46，php中的pear是什么
答案：
pear是php扩展与应用库(php extension and application repository)，它是php扩展你以及应用的一个代码仓库。

47，如何使用php和mysql上传视频
答案：
可以在数据库中存视频的存放路径，而不是存放真正的视频内容。将视频数据放到指定的文件夹下面，由于默认上传大小是2mb，所以可能需要修改php.ini中的max_file_size或者是通过set_max_file_size函数进行修改。


48，php中错误类型
答案：
php中的错误类型大致有三类。
提示：这是一些非正常的信息而不是严重的错误，有的甚至不会显示给用户。比如访问了不存在的变量。
警告：这是有点严重的错误，将会把警告信息显示给用户，但是不影响代码的输出。比如包含一些不存在的文件。
错误：最严重的问题，也是真正的错误，程序将终止执行并且输出错误信息。比如访问了不存在的php类。


49，如果在php中定义常量
答案：
define('name','value');


50，如何不适用submit按钮来提交表单
答案：
可以使用超链接和ajax提交。


51，php中的count函数，如何使用count($var,0)实现count($var,1)
答案：
count()函数的第二个参数指示的是模式，可以取值为0和1，如果是0，表示只取一级的数组元素个数。如果为1，会递归的统计子数组的元素个数。例如array(array(1,2),array(1,2,3))如果模式是0得到的是2，但是如果模式是1得到的是 2 + 2 + 3 = 7 其中的后面的额外的2和3就是子数组的元素个数。如果还有更低级的子数组，还会进行递归的计算和叠加。
要用count($var,0)实现count($var,1)可以根据上面的思想进行递归的计算： 一个数组本身的count($arr,0) + 数组中每一个子数组的count($arr[i],1)，后面的子数组的count($arr[i],1)便可以直接递归实现。这个递归的base是数组中没有子数组。
大致代码如下：
	/*
		使用count($var,0)实现的count($var,1)效果函数
	@param array $arr 要统计元素个数的数组
	@return int 递归统计的数组的元素个数
	*/
	function count_1($arr=array()){
		$toReturn = count($arr,0);
		foreach($arr as $v){
			if(is_array($v))
				$toReturn += count_1($v);
		}
		return $toReturn;
	}


52，$input="2,4,8,16,32,64";如果计算这个字符串中数字的和
答案：
一般的处理方案是将字符串转成数组，然后进行累加
	function sum($str=""){
		$arr = explode(',',$str); //利用explode将字符串打散成数组
		$toReturn = 0;
		foreach($arr as $v){
			$toReturn += $v;
		}
		/*
			如果考虑到是等比数列的话，这里可以进行一次优化，具体如下
			$toReturn = $arr[count($arr) -1] * 2 -1;
		*/
		return $toReturn;
	}


53, 这个判断语句有什么问题 if(!strpos($haystack,$needle)){}
答案：
strpos()函数返回一个子字符串首次出现的位置，如果没有找到返回false。由于可能出现找到的索引是0，所以上面在这种情况下不能正确判断是否成功找到了相应的字符串。正确的写法应该是 if(false !== strpos($haystack,$needle))


54，什么是sql注入，如何防止sql注入
答案：
sql注入一般是指的由于后台代码不严谨没有对前台某型特殊的字符串进行处理或者过滤，导致前台可以传递sql语句(或者部分sql语句片段，扰乱原有的sql语句)并执行。
防止sql注入，一般是通过将前台传入的特殊字符，例如 ""  '' 转义符\ 等进行转义处理再进行sql拼接，在php中一般通过使用addslashes函数进行转义处理。

55,如果在不同的页面之间传递变量
答案：
	1）通过cookie, 一个页面setcookie('name','value');  另一个页面就可以通过 $_COOKIE['name']获取到这个变量
	2）通过session，相对于cookie是存在浏览器上，session是存在服务器上。一个页面通过 session_start(); $_SESSION['name']='value'。另一个页面就可以通过session_start(); $_SESSION['name']获取到.
	3）通过form表单，一个页面中有form表单，然后form的action目标是另一个页面，那么这个页面的form表单里面的值就传递到了另一个页面。
	4）通过超链接的href中添加参数进行传递，例如一个页面上可以写一个超链接指向另一个php页面，这个链接的href后面就可以带上 "?k1=v1&k2=v2"这样的参数列表进行GET参数的传递。

56，如何拿到浏览器的真实ip
答案：
获取浏览器ip： $_SERVER['HTTP_CLIENT_IP']
获取代理的ip： $_SERVER['HTTP_X_FORWARDED_FOR'], 代理ip可能有多个，它们是用逗号隔开的。所以可以$ips = explode(',',$_SERVER['HTTP_X_FORWARDED_FOR']);
获取服务器真实ip：通过访问http://city.ip138.com/city0.asp可以得到ip和所在地的简单信息（格式大致为:您的IP是：[36.36.200.124] 来自：广东省深圳市 有线宽带）。然后用正则 /\[([^\]]*)\]/ 匹配出里面的ip字段


57，php脚本默认的最大之间时间是多少，如果设置这个时间
答案：
php脚本一般默认的执行时间上限是30s，如果超过了30s，脚本会终止执行，所以对于长时间的文件操作等需要设置更长的执行时间限制。
可以通过set_time_limit(时间)这个函数来设置超时执行的时间。如果参数提供的是0，那么表示没有时间上的限制，会无限期执行。
类似的可以通过set_memory_limit(0)来设置没有内存的限制(一般的php内存限制不会计算虚拟内存。而如果没有内存的限制那么程序会使用所有的内存)。

58，使用mysqli
答案：mysqli是php对mysql进行的扩展，相对于原生的mysql扩展，mysqli使用的是面向对象的实现，在php7之后php默认的已经不在支持mysql扩展，用户应该使用mysqli扩展。
	创建mysqli对象  $mysqli = new mysqli("$host:$port",$user,$password)
	执行命令 $mysqli->query('set names utf8') $mysqli->query("select * from information_schema where schema_name='$name'")


59，如果执行系统命令
答案：
一般可以使用string exec(command[,resultArr[,returnCode]])进行系统命令的执行。这个函数返回的是一个命令执行的最后一行字符串，第二个参数如果提供了，会将命令执行的所有行的结果一行一行的追加到这个数组的后面，第三个参数如果提供了会返回命令执行的状态码，这个状态码一般是0.
	exec('ls')
	exec('chmod 775 . -R',$arr,$state)

60，php中的sleep函数的作用是什么
答案:
暂时放弃线程的调度机会，让出cpu的控制权。时间单位是s.


61,PHP中的函数默认的权限是什么，是private的吗？PHP中的反射如何使用
答案：
php中的函数默认的权限是public的。
php中的反射使用：
	$obj = new $classname();
	$rf = new ReflectionMethod($classname,$method); //反射一个方法
	//获取权限修饰符，判断权限是否为public（其实这里判断的有一点问题，因为php中默认的是public的，通过测试如果没有加上任何的修饰符，下面与的结果也是0，这里仅仅作为一个例子）
	if(!(ReflectionMethod::IS_PUBLIC & $rf->getModifiers())){
		echo "you do not hava the permition to access the method";
		die;
	}
	//获取到一个函数的参数名称数组，下面invoke的参数列表的序列可以通过这里获取到名称数组进行相应顺序的形参传入.
	$ps = $rf->getParameters();
	$result = $rf->invoke($obj,参数1，参数2,...);

62，如何通过.htaccess设置url重写
答案：
要使用.htaccess，首先要在php.ini中开启重写的扩展。然后在相应的要重写的目录(这里一般是网站入口文件所在目录)添加.htaccess文件。重写规则如下：
	<IfModule mod_rewrite.c>
	Options +FollowSymlinks
	RewriteEngine On

	#下面两个语句表示如果是当前这个目录的中的子目录或者是文件路径就不进行重写
	RewriteCond %{REQUEST_FILENAME} !-d
	RewriteCond %{REQUEST_FILENAME} !-f
	#下面是利用正则匹配url 并进行重写 其中下面的"L"表示这个重写规则是最后一个重写规则
	RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]
	</IfModule>


63, js中的switch与php中的switch有何异同
答案：
js和php中的switch都可以对各种数据类型进行判断，这一点和C++ java等强类型的语言不同。但是php中的case中的匹配是进行弱类型的匹配，也就是使用的是==，而js中switch里面的case条件的匹配是严格匹配的，会考虑传入的数据类型，也就是使用的是===。例如下面的代码在php中匹配到了""而在js中使用严格匹配匹配到了后面的0:
		switch(0){
		case '':
			break;
		case 0: 
			break;
		}


64，php中的未定义的变量是undefined吗
答案：不是，php中没有undefined这种数据类型，在js中没有定义的变量的值和类型都是undefined。而在php未定义的数据类型是NULL，值为空.下面的代码输出string(4)"NULL"，但是会报notice，说是变量未定义: $a; var_dump(gettype($a));


65，php中的和js中对闭包中父级元素的访问有何区别。
答案：php中的闭包一般保留的是use指定的元素的一个副本，所以引用到的父级函数中的变量的改变对后续的闭包调用没有影响。但是js中保存的是父级函数内部的变量的引用，内部函数执行的时候会通过scope属性寻找到父级函数的内部的引用变量，而在这之前这个变量的改变是会影响到闭包调用的执行情况的。当然，php中也可以明确的指出use的时候进行引用传递，这样就和js中的引用大致相同。


66，能否使用use访问全局变量，为何。use进行引用传递和值传递的差异。
答案：
use表示引入父级函数范围内的变量，所以如果是全局的函数可以使用use访问全局变量，而如果不是全局函数使用use不能成功访问到全局的变量，这个时候应该使用global。php中闭包中默认是不能访问外部的变量的，如果要访问全局变量可以使用global引入，如果是要访问父级函数中的变量，可以使用use引入。use如果没有指定为use(&$a)这样的引用引入，一般是进行值的传递，也就是在内部函数定义的时候会在闭包类中保存外部函数中use指定变量的副本(具体存放一个public $static属性，这个属性是一个是一个数组，数组中的每一项对应个一个use引用，如果一个use指定的变量在外部没有定义，那么保存的为null)。形如use($a,&$b)，其中$b便进行了引用的传递，这个和函数的引用传参是类似的，如果是引用传递，那么效果和js中的引用传递是一样的，也即是函数调用之前被引用到的外部的函数中的变量的更改可能会影响到最终的执行结果。
补充分析：
php中只有函数表达式才能构成闭包，而对于一般的函数申明，只能构成一般函数，use关键字只能使用在闭包函数上面，否则会编译错误（表示未预料到的use）。这一点和js中不同，js中所有的函数都是闭包函数。
测试代码：
	$i = 1;
	//闭包，引入了全局的i
	$f1 = function() use($i){
		
	};
	var_dump($f1); 
	//闭包，没有进行任何的引入
	$f2 = function(){
		global $i;
	};
	var_dump($f2);
	//普通函数申明
	function f3(){
		
	}
	var_dump($f3); //NULL，因为没有这个变量(notice：undefined f3)

	/*
	//编译错误，因为php中只有函数表达式才能构成闭包，而只有闭包中函数上才能使用use。对于这种函数申明的形式定义的函数只能构成普通的函数，不能构成闭包函数s
	function f4() use($i){
		
	}
	*/

	/*多重闭包加引用传递测试*/
	$out1 = function(){
		$a = 2;	
		$b = 3;
		$out2 = function() use($b){
			$inner = function() use(&$a,&$b){
				var_dump($a); //NULL，因为use只能在父级函数的内部进行查找，不会主动的查找到祖父级
				var_dump($b); //int(3)
				$a = 100;
				return $a;
			};
			return $inner;
		};
		return $out2;
	};
	$res = $out1();
	$res = $res();
	var_dump($res()); //100


67，小知识点：php中尽管可以使用$func()直接调用，但是不能使用$func()()，这种写法会出现编译错误，说是第二个括号是unexpected。尽管如果是闭包环境$func()返回的可能就是一个函数表达式，但是编译通不过。