1，函数的调用方式
答案：有四种，分别是函数式、方法式、构造器式调用和上下文调用模式
1）函数式：func()
2）方法式：o.method()
3）构造器式调用(即new 构造函数)：
构造函数中不需要return，因为会默认返回this。如果手动的return了void或者基本数据类型或者null或者undefined，那么这个return无效，还是会返回this。如果是返回一个对象，那么这个对象就替换掉了this，this被丢弃。
4)上下文调用：
func.apply(对象,参数列表构成的数组或者伪数组) 
func.call(对象，参数列表)
---由于apply是将参数列表放到一个数组或者伪数组中进行传递的，一般比call更实用。
---note: 如果没有传入对象或者传入null或者undefined，那么函数里面的this指代的是window。如果传入的是基本数据类型，那么会被转换为对应的包装类型。
----扩展：由于apply的参数列表可以接受伪数组，常常用这个特性进行一些特殊的数组操作，例子如下
	var a = {};  //这是一个对象，不是数组，构成伪数组
	a[0] = 'a'; a[1] = 'b';
	a.length = 2;
	var arr = [];  //一个空数组
	arr = arr.concat(a); //concat连接两个数组,这里的伪数组不能得到正确结果，因为实际上它将a这个对象作为一个整体追加到了arr里面。但是使用下面的apply可以解决这个问题.
	arr = Array.prototype.concat.apply(arr,a); //使用apply第二个参数接受伪数组并进行伪数组展开的特性可以得到正确的结果。

2，setTimeout与setInterval的最小执行间隔
答案：
编码的时候，可以将参数设置为0，但是实际执行的效果不会马上执行。理论上在苹果操作系统上，可以认为是10s，在windows操作系统上可认为是15s。在html中定义的最小时间间隔是4s，而Firefox中给出的最小时间间隔的定义是10s。如果要设置最小时间间隔执行，一般可设置setTimeout(function,1,参数1，参数2，...)
--note:测试的时候，指的注意的是，如果打开firebug，由于console.log有自己的最小时间，所以，如果设置的时间间隔很小，将会看到，执行的明显减低了，关闭firebug可以看到真实的执行效率。