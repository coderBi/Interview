①：C++与JS中的效果是一样的，都是从左往右扫描，只要有一个?成立就存在短路效应返回这个表达式的值。否则将这个表达式的值当做下一个表达式中?的判断条件进行下一个表达式的计算。
②：php与C++和js中类似都是从左往右进行扫描，将前一个的计算结果当做下一个三目运算的条件，但是php中不存在短路效应，也就是说php中里连续的三目运算在没有括号的情况下也会计算到所有的?。前一个表达式无论取哪一个值都会带入下一个的计算条件，因此最终的整个表达式的结果一定出现在最后一个: 的两侧。
③：java中比较特殊，也符合一般程序员常常要的效果。java中将第一个表达式的: 右边的整个部分当做一个子表达式，相当于将后面括起来。

对于下面的代码
 result  = false ? 1 : 2 ? 3 : 4 ? 5 : 6;
如果在js或者是C++中会在第二个?成立之后返回3，进行短路不会计算到后面的5和6
如果是php由于不存在短路,所以一直会计算到最后返回结果5
如果是java，会被解释为 false ? 1 : (2 ? 3 : 4 ? 5 : 6)，由于括号里面的子表达式的判断条件是2，是一个int不是bool，所以会出现编译错误。下面的语句在java中可以通过编译 false ? 1 : 2 == 1 ? 3 : 4;是正确的写法。