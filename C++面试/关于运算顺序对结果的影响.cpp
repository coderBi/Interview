#include <iostream>
using namespace std;

/*
题目描述：
	下面的四个语句中a和b最终的结果是相等的有哪些
	int a = x + y -z, b = x -z + y;
	int a = x*y/z, b = x/z*y;
	int a = x<<y>>z, b = x>>z<<y;
	int a = x & y | z, b = x|z&y;
分析：
	1）对于一个加一个减，虽然可能存在中间结果溢出，但是最终的运算结果是一样的，加减的运算符优先级相同，结合方向都是从左到右。
	2）对于乘除运算，这里如果是浮点型或者double型计算，那么结果应该也是相同的的，但是这里是int型的计算，如果是先除法那么会由于向下取整转成整型可能最终的结果与向计算乘法的结果相比小一些。
	3）对于移位运算符结合的方向是从左到右。如果是先进行左移，那么可能将下面的某一位移到了符号位，然后进行右移会进行符号位的填充，这个结果与先进行右移可能不一样。另一方面，如果先进行右移，抹除了原来的有效位然后再进行左移由补充上0（例如对于1先右移3位然后再左移3位结果为0，如果是先左移3位然后再右移3位得到的还是1）.
	4）对于位运算符 & 的优先级比 | 的优先级更高，二者都是从左到右进行结合的，所以x & y | z 可以解释为（x & y） | z 而x | z & y可以解释为 x | (z & y)。从语意上其实已经不同了。
*/

int main(){
	int x = 0xa, y = 0x7, z = 0x3;
	int a1 = x + y -z, b1 = x -z + y;
	int a2 = x*y/z, b2 = x/z*y;
	int a3 = x<<y>>z, b3 = x>>z<<y;
	int a4 = x & y | z, b4 = x|z&y;
	cout << a1 << "---" << b1 << endl; //14---14
	cout << a2 << "---" << b2 << endl; //23---21
	//对于a3:0xa左移7位为0x500,然后右移三位后为0xa0。对于b3:0xa先右移三位为0x1,然后左移7位得到0x80。
	cout << a3 << "---" << b3 << endl; //160--128
	//a4 = x&y|z = 0x2 | 0x3 = 0x3  b4 = x|(z&y) = 0xa | 0x3 = 0xb  
	cout << a4 << "---" << b4 << endl; //3--11
	return 0;
}