#include <iostream>
using namespace std;

/*
内联函数：
		1）内联函数指的是使用inline关键字定义的函数，内联函数是为了减少短小的函数调用的时候的损失的效率，因为函数调用就是设计到环境保存、传参、返回数据、销毁堆栈等开销。如果函数是内联的，那么这个函数会在编译阶段在调用的地方进行函数体的展开，这样就可减少执行阶段的开销。使用内联的不好的地方就是会导致源代码的增大。与宏定义的函数相比，内联函数会在编译阶段进行类型的检查，而宏定义的是预编译阶段的文本替换不涉及类型检查。
		2）内联函数依赖于不同的编译器实现，inline关键字只是给编译器一种编译的建议。内联函数中不能包含复杂的语句结构，例如递归，失败的内联函数不仅起不到提升效率的追求还会增加目标代码量。在类的定义体中定义的函数，默认是内联的。
		3) 内联函数也是函数，虽然在编译阶段进行了代码的展开，但是执行阶段一样设计到参数的传递和参数表达式的计算
*/

inline void func(int x, int y){
	x++;
	y++;
	cout << x << "-----" << y << endl;
}

class Test
{
public:
	int z;
public:
	Test():z(100){}
	inline void func(int x, int y){
		x++;
		y++;
		z++;
		cout << x << "-----" << y << "-----" << z << endl;
	}
};

int main(){
	int x = 5, y = 6;
	func(x,y);
	//重新打印实参，如果是宏传递，那么这里会直接对传递的x、y的本体进行修改。说到底，内联函数也是函数，与宏定义的替换有本质的区别。
	cout << x << "...." << y << endl;

	//类中的内联函数
	Test t;
	t.func(x,y);
	cout << x << "...." << y << endl;
	cout << t.z << endl; //101 内联函数中对成员变量实现了修改
	return 0;
}